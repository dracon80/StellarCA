#!/bin/sh

####################################################################
## Display help text to user
####################################################################
display_help() {
    echo -e "\n\e[34mUsage:\e[0m stellar COMMAND [OPTIONS]\n"
    echo -e "This script helps manage openssl as a Certificate Server.\n"

    echo -e "\e[34mCommands:\e[0m"
    echo -e "  init               Initialised the Certificate Authority container"
    echo -e "  gencrl             Generate a new CRL file"
    echo -e "  ocsp               Starts the openssl ocsp responder"
    echo -e "  subordinate        Creates a new Subordinate CA certifcate, and associated CRL and OCSP signing certificates"

    echo -e "\e[34m\nGlobal Options:\e[0m"
    echo -e "  --help    | -h     To get detailed help on commands use $0 COMMAND --help"
    echo -e "  --debug   | -v     This provides additional debug loggined to std out"

    exit 0
}

display_init_help(){
    echo -e "\n\e[34mUsage:\e[0m stellar init [OPTIONS]\n"
    echo -e "Initalizes the container by either using existing Kubernetes Secrets and Configmaps or by creating a new config based on stellar-config.yaml.\n"

    echo -e "\e[34mOptions:\e[0m"
    echo -e "  --dry-run | -d     This will run the script and create all required file, and display the kubectl commands that would have been called"
    echo -e "  --cleanup | -c     Can only be used in combination with --dry-run. Will delete all files created during the initialization process"

    exit 0
}

display_ocsp_help(){
    echo -e "\n\e[34mUsage:\e[0m stellar ocsp [OPTIONS]\n"
    echo -e "Runs openssl ocsp server\n"

    echo -e "\e[34mOptions:\e[0m"
    echo -e "  --dry-run | -d     This will print the openssl command that would be run using the supplied switches"

    exit 0
}

display_subordinate_help(){
    echo -e "\n\e[34mUsage:\e[0m stellar subordinate [OPTIONS]\n"
    echo -e "Create new CA, OCSP, and CRL certificates for a subordinate CA, saving to Kubernetes secret\n"

    echo -e "\e[34mOptions:\e[0m"
    echo -e "  --name    | -n     (Required) The common name for the new Subordinate CA"
    echo -e "  --basename| -b     (Required) The base file name that the new certificates will use."
    echo -e "  --dry-run | -d     This will run the script and create all required file, and display the kubectl commands that would have been called"

    echo -e "\e[34mExamples:\e[0m"
    echo -e "** To create certificates for a subordinate named Sub CA, and have the certificates name subca.crt, subca-crl.crt and subca-ocsp.crt"
    echo -e "    stellar subordinate --name=\"Sub CA\" --basename=subca"

    exit 0
}


display_header(){
    echo -e "\n\e[$1m----------------------------------------------------------------------------\e[0m"
    echo -e "\e[$1m---\e[0m $2"
    echo -e "\e[$1m----------------------------------------------------------------------------\e[0m"
}

####################################################################
## Echo the message, only if VERBOSE is true
####################################################################
print_debug(){
    if $VERBOSE; then
        echo -e "DEBUG: $1"
    fi
}
print_info(){
    echo -e "--- $1"
}

print_dryrun(){
    echo -e "\e[34mDRY-RUN:\e[0m $1" | tr -s ' '
}

print_warning(){
    echo -e "--- \e[1;33m$1\e[0m"
}

####################################################################
## Echo the error message and exit the script
####################################################################
fatal_error(){
    echo -e "\n\e[31m$1\e[0m"
    #Cleanup any files before exiting
    cleanup
    echo -e "\e[31mExiting script\e[0m"
    exit 1
}

####################################################################
## Parse and validate the parameters of the init command
####################################################################
parse_init_params(){
    #Parse the supplied parameters
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --dry-run | -d)
                DRY_RUN=true
                ;;
            --cleanup | -c)
                CLEANUP=true
                ;;
            --verbose | -v)
                VERBOSE=true
                ;;
            --help | -h)
                display_init_help
                ;;
            *)
                echo "Unknown init option: $1"
                display_init_help
                ;;
        esac
        shift
    done

    #Cleanup can only be used in combination with if dry-run
    if [ "$DRY_RUN" = false ] && [ "$CLEANUP" = true ]; then
        echo -e "\nstellar init \e[31m--cleanup\e[0m can only be used when in combination with --dry-run"
        display_init_help
    fi
}

####################################################################
## Parse and validate the parameters of the gencrl command
####################################################################
parse_gencrl_params(){
    #Parse the supplied parameters
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --verbose | -v)
                VERBOSE=true
                ;;
            --help | -h)
                display_help
                ;;
            *)
                echo -e "\nUnknown gencrl option: $1"
                echo -e "\e[31mstellar gencrl does not accept options\e[0m"
                display_help
                ;;
        esac
        shift
    done
}

####################################################################
## Parse and validate the parameters of the ocsp command
####################################################################
parse_ocsp_params(){
    #Parse the supplied parameters
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --dry-run | -d)
                DRY_RUN=true
                ;;
            --verbose | -v)
                VERBOSE=true
                ;;
            --help | -h)
                display_ocsp_help
                ;;
            *)
                echo "Unknown ocsp option: $1"
                display_ocsp_help
                ;;
        esac
        shift
    done
}

####################################################################
## Parse and validate the parameters of the init command
####################################################################
parse_init_params(){
    #Parse the supplied parameters
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --dry-run | -d)
                DRY_RUN=true
                ;;
            --cleanup | -c)
                CLEANUP=true
                ;;
            --verbose | -v)
                VERBOSE=true
                ;;
            --help | -h)
                display_init_help
                ;;
            *)
                echo "Unknown init option: $1"
                display_init_help
                ;;
        esac
        shift
    done

    #Cleanup can only be used in combination with if dry-run
    if [ "$DRY_RUN" = false ] && [ "$CLEANUP" = true ]; then
        echo -e "\nstellar init \e[31m--cleanup\e[0m can only be used when in combination with --dry-run"
        display_init_help
    fi
}

####################################################################
## Parse and validate the parameters of the subordinate command
####################################################################
parse_subordinate_params(){
    # Parse command-line options
    while getopts ":n:b:-:h:dv" opt; do
    case $opt in
        n)
            subordinate_name="$OPTARG"
            ;;
        b)
            subordinate_basename="$OPTARG"
            ;;
        d)
            DRY_RUN=true
            ;;
        v)
            VERBOSE=true
            ;;
        h)
            display_subordinate_help
            ;;
        -)
            case "${OPTARG}" in
                dry-run|d)
                    DRY_RUN=true
                ;;
                name=*)
                    subordinate_name="${OPTARG#*=}"
                ;;
                basename=*)
                    subordinate_basename="${OPTARG#*=}"
                ;;
                verbose|v)
                    VERBOSE=true
                ;;
                help|h)
                    display_subordinate_help
                ;;
                *)
                    echo "Unknown subordinate option: --$OPTARG" >&2
                    display_subordinate_help
                ;;
            esac
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            display_subordinate_help
            ;;
        *)
            echo "Unknown subordinate option: $OPTARG"
            display_subordinate_help
            ;;
    esac
    done

    #Both name and basename are required parameters
    if [ -z "$subordinate_name" ] || [ -z "$subordinate_basename" ]; then
        echo -e "\n\e[31mBoth --name and --basename are required parameters.\e[0m"
        display_subordinate_help
    fi
}

####################################################################
## Set the common variables that most functions use
####################################################################
set_variables(){

    #Check that stellar-config.yaml exists
    if [ ! -e "stellar-config.yaml" ]; then
        fatal_error "stellar-config.yaml not found"
    fi

    #Make the follow variables env variables
    set -o allexport

    # Run yq to extract the config data supplied
    openssl_name=$(yq '.openssl.name' stellar-config.yaml)
    openssl_certBaseFileName=$(yq '.openssl.certBaseFileName' stellar-config.yaml)
    openssl_ocspBaseURL=$(yq '.openssl.ocspBaseURL' stellar-config.yaml)
    openssl_aiaBaseURL=$(yq '.openssl.aiaBaseURL' stellar-config.yaml)
    openssl_crlBaseURL=$(yq '.openssl.crlBaseURL' stellar-config.yaml)
    openssl_country=$(yq '.openssl.country' stellar-config.yaml)
    openssl_organizationName=$(yq '.openssl.organizationName' stellar-config.yaml)
    openssl_organizationUnit=$(yq '.openssl.organizationUnit' stellar-config.yaml)
    openssl_state=$(yq '.openssl.state' stellar-config.yaml)
    openssl_location=$(yq '.openssl.location' stellar-config.yaml)
    openssl_lifeTimeDays=$(yq '.openssl.lifeTimeDays' stellar-config.yaml)
    openssl_defaultDays=$(yq '.openssl.defaultDays' stellar-config.yaml)

    #Turn off the auto export of variables
    set +o allexport

    ######Static Config paths######
    ca_etc_path=/etc/ca
    conf_path=$ca_etc_path/config
    public_path=$ca_etc_path/certs                      # Self Signed Certificate, or certificate for parent.
    private_path=$ca_etc_path/private                   # Private Certificates for this CA
    passwords_path=$ca_etc_path/passwords               # Plain text files with passwords to decrypt private certs
    ######Static Config Files######
    conf_file=$conf_path/openssl.conf
    ca_password_file=$passwords_path/ca_password
    crl_password_file=$passwords_path/crl_password
    ocsp_password_file=$passwords_path/ocsp_password
    ######Working folders for new Certificates######
    ca_var_path=/var/ca
    csr_path=$ca_var_path/csr
    newcerts_path=$ca_var_path/certs
    db_path=$ca_var_path/db
    ######Kubernetes Config Map and Secrets######
    openssl_configmap=$openssl_certBaseFileName-openssl-configmap
    passwords_secret=$openssl_certBaseFileName-passwords
    certs_secret=$openssl_certBaseFileName-certs
    ######Shared Web distributing CRL and CRT######
    web_path=/var/www/html

    #Command and Option variables
    DRY_RUN=false
    VERBOSE=false
    CLEANUP=false
    COMMAND=""
    
    #Colours used when printing to std out
    COLOUR_INFO=32
    COLOUR_WARN=36
    COLOUR_ERR=31
}

####################################################################
## Set the common variables that most functions use
## $1 - Path to file containing new password
####################################################################
generate_random_password(){
    #Create the CA key passwords to be used
    print_debug "creating $1"
    echo $(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32 ; echo '') > $1

    if [ ! -s "$1" ]; then
        fatal_error "Failed to generate random password $1!"
    fi
}


####################################################################
## Save the password files into kubernetes secret
## $1 - Passwords folder path
## $2 - Secret Name
####################################################################
save_random_passwords(){
    #create the Kubernetes Secrets from the generated password files stored in path $1
    print_info "Saving random passwords at $1 in kubernetes secret $2"

    if $DRY_RUN; then
        print_dryrun "kubectl create secret generic $2 --from-file="$1" --type=ca-passwords"
    else
        kubectl create secret generic $2 --from-file=$1 --type=ca-passwords
    fi
}

####################################################################
## Combine public and private certificates and save to kubernetes
## $1 - Private Certificates Path
## $2 - Public Certificates Path
## $3 - Kubernetes Secret Name
####################################################################
save_certificates(){
    # Create YAML file for private key files
    kubectl create secret generic --type="ca-certs" "$3" --from-file=$1 --dry-run=client -o yaml > "$(pwd)/tmp/private.yaml"
    # Create YAML file for certificate files
    kubectl create secret generic --type="ca-certs" "$3" --from-file=$2 --dry-run=client -o yaml > "$(pwd)/tmp/cert.yaml"
    #merge the 2 yaml files

    if $DRY_RUN; then
        if $VERBOSE; then
            yq ". *= load(\"$(pwd)/tmp/cert.yaml\")" "$(pwd)/tmp/private.yaml"
        fi

        print_dryrun "kubectl apply -f tmp/secret.yaml"
    else
        print_info "Saving Certificates in kubernetes secret $3"

        #merge the two yaml files into 1
        yq ". *= load(\"$(pwd)/tmp/cert.yaml\")" "$(pwd)/tmp/private.yaml" > "$(pwd)/tmp/secret.yaml"
        kubectl apply -f tmp/secret.yaml
    fi

    #Remove temp file
    print_debug "Cleaning up temp secret files"
    rm -f "$(pwd)/tmp/secret.yaml" "$(pwd)/tmp/private.yaml" "$(pwd)/tmp/cert.yaml"
}

####################################################################
## Create a CSR using provided parameters
## $1 - Certificate Subject
## $2 - Private Certificate file
## $3 - CSR file
## $4 - Private Certificate Password file
####################################################################
generate_csr(){
    #Define file names for certificates

    print_info "Generating 4096 bit Certificate Signing Request"
    openssl req -new -config $conf_file -newkey rsa:4096 \
        -subj "$1" \
        -keyout $2 \
        -out $3 \
        -passout file:$4

    #check that the csr was created and exists.
    if [ ! -s "$3" ]; then
        fatal_error "Failed to generate csr for $1"
    fi
}

####################################################################
## Sign CSR using provided parameters
## $1 - CSR file
## $2 - Public Certificate file
## $3 - Openssl Extension
## $4 - Certificate Lifetime
## $5 - Should the certificate be published
####################################################################
sign_csr(){
    openssl ca -config $conf_file -in $1 -out $2 \
        -extensions $3 -passin file:$ca_password_file -days $4 -notext -batch

    #check that the self signed certificate was created and exists.
    if [ ! -s "$2" ]; then
        fatal_error "Failed to sign the certificate"
    fi
    
    if $5; then
        #copy the certificate into the shared web folder so it can be served up by the web server
        print_info "Publishing Certificate To Web Server"
        cp -f "$2" "$web_path/"
    fi
}

####################################################################
## Generate a new CRL file
####################################################################
generate_crl(){
    #Update the CRL using the current text database
    display_header $COLOUR_INFO "Updating CRL for $openssl_name"

    openssl ca -gencrl -config $conf_file \
        -cert $public_path/$openssl_certBaseFileName-crl.crt \
        -keyfile $private_path/$openssl_certBaseFileName-crl.key \
        -passin file:$crl_password_file \
        -out $web_path/$openssl_certBaseFileName.crl
}

####################################################################
## Start the openssl ocsp responder process
####################################################################
start_ocsp_responder(){
    display_header $COLOUR_INFO "Starting OCSP Responder on port 9801"

    if $DRY_RUN; then
        print_dryrun "openssl ocsp -index $db_path/index \
        -port 9801 \
        -rsigner $public_path/$openssl_certBaseFileName-ocsp.crt \
        -rkey $private_path/$openssl_certBaseFileName-ocsp.key \
        -passin file:$ocsp_password_file \
        -CA $public_path/$openssl_certBaseFileName.crt"
    else
        exec openssl ocsp -index $db_path/index \
        -port 9801 \
        -rsigner $public_path/$openssl_certBaseFileName-ocsp.crt \
        -rkey $private_path/$openssl_certBaseFileName-ocsp.key \
        -passin file:$ocsp_password_file \
        -CA $public_path/$openssl_certBaseFileName.crt
    fi
}

####################################################################
## Delete all existing data from known locations
####################################################################
cleanup(){
    #If cleanup is true then delete all the files just created
    if $CLEANUP; then
        echo -e "\nCLEANUP: Deleting all files creating during initialization\n"
        rm -rf /etc/ca/*
        rm -rf /var/ca/*
        rm -rf /var/www/html/$openssl_certBaseFileName*.*
    fi
}

####################################################################
## Create new Subordinate Certificates
####################################################################
config_subordinate(){
    #Create the temp folders
    mkdir /tmp/certs/
    mkdir /tmp/private/
    mkdir /tmp/passwords/

    sub_password_file=/tmp/passwords/ca_password
    sub_crl_password_file=/tmp/passwords/crl_password
    sub_ocsp_password_file=/tmp/passwords/ocsp_password

    #Generate passwords for this CA
    generate_random_password $sub_password_file
    generate_random_password $sub_crl_password_file
    generate_random_password $sub_ocsp_password_file

    save_random_passwords "/tmp/passwords" "$subordinate_basename-passwords"

    #Create the subordinate CA csr 
    display_header $COLOUR_INFO "Generating a subordinate CA certificate for $subordinate_name"
   
    generate_csr "/C=$openssl_country/ST=$openssl_state/L=$openssl_location/O=$openssl_organizationName/OU=$openssl_organizationUnit/CN=$subordinate_name" \
        "/tmp/private/$subordinate_basename.key" \
        "$csr_path/$subordinate_basename.csr" \
        "$sub_password_file"

    sign_csr "$csr_path/$subordinate_basename.csr" \
        "/tmp/certs/$subordinate_basename.crt" \
        "sub_ca_ext" \
        $openssl_lifeTimeDays \
        true

    #Create the OCSP Cert
    display_header $COLOUR_INFO "Generating OCSP signing certificate for $subordinate_name"
    generate_csr "/C=$openssl_country/ST=$openssl_state/L=$openssl_location/O=$openssl_organizationName/OU=$openssl_organizationUnit/CN=$subordinate_name OCSP Signer" \
        "/tmp/private/$subordinate_basename-ocsp.key" \
        "$csr_path/$subordinate_basename-ocsp.csr" \
        "$sub_ocsp_password_file"
        
    sign_csr "$csr_path/$subordinate_basename-ocsp.csr"\
        "/tmp/certs/$subordinate_basename-ocsp.crt" \
        "ocsp_ext" \
        $openssl_defaultDays \
        true

    display_header $COLOUR_INFO "Generating CRL signing certificate for $subordinate_name"

    generate_csr "/C=$openssl_country/ST=$openssl_state/L=$openssl_location/O=$openssl_organizationName/OU=$openssl_organizationUnit/CN=$subordinate_name CRL Signer" \
        "/tmp/private/$subordinate_basename-crl.key" \
        "$csr_path/$subordinate_basename-crl.csr" \
        "$sub_crl_password_file"
        
    sign_csr "$csr_path/$subordinate_basename-crl.csr"\
        "/tmp/certs/$subordinate_basename-crl.crt" \
        "crl_ext" \
        $openssl_defaultDays \
        true

    #Save the certificates into Kubernetes
    save_certificates /tmp/private /tmp/certs "$subordinate_basename-certs"

    print_debug "Deleting all temp files"
    rm -rf /tmp/certs
    rm -rf /tmp/passwords
    rm -rf /tmp/private

}

####################################################################
## Initialize the container
####################################################################
init_container() {

    #Create the required folders.
    mkdir -p $conf_path
    mkdir -p $public_path
    mkdir -p $private_path
    mkdir -p $passwords_path
    mkdir -p $csr_path
    mkdir -p $newcerts_path
    mkdir -p $db_path
    mkdir -p $web_path

    #Create random seed data
    dd if=/dev/urandom of=$ca_etc_path/random bs=256 count=1 status=none

    #Confirm the random data was created
    if [ ! -e "$ca_etc_path/random" ]; then
        fatal_error "Failed to create random seed data file!"
    fi

    #Check for openssl config file in configmap, and if present use it, otherwise create a new file one from template and create a configmap in kubernetes.
    if kubectl get configmap "$openssl_configmap" >/dev/null 2>&1; then
        display_header $COLOUR_WARN "Using existing configmap $openssl_configmap"
        kubectl get configmap $openssl_configmap -o jsonpath='{.data.openssl\.conf}' > $conf_file
    else
        display_header $COLOUR_INFO "Creating a new Config file for $openssl_name"

        print_debug "replacing tokens in openssl.conf template with values from stellar-config.yaml"

        #Create the openssl config file by substituting any place holders with Environment variables
        envsubst '$openssl_name,$openssl_certBaseFileName,$openssl_ocspBaseURL,$openssl_aiaBaseURL,$openssl_crlBaseURL,
        $openssl_country,$openssl_organizationName,$openssl_organizationUnit,$openssl_state,$openssl_location,
        $openssl_lifeTimeDays,$openssl_defaultDays' < "$(pwd)/openssl.conf" > "$conf_file"

        if [ ! -s "$conf_file" ]; then
            fatal_error "Failed to generate openssl configuration $conf"
        fi

        print_info "Saving $conf_file as configmap $openssl_configmap"

        if $DRY_RUN; then
            print_dryrun "kubectl create configmap $openssl_configmap --from-file=$conf_path"
        else
            #upload the newly created openssl.conf file into the configmap
            kubectl create configmap $openssl_configmap --from-file=$conf_path
        fi
    fi

    #Check for password secrets and use it, else create new passwords and save to kubernetes.
    if kubectl get secret $passwords_secret >/dev/null 2>&1; then
        display_header $COLOUR_WARN "Using private key passwords found in secret $passwords_secret"

        print_debug "creating $ca_password_file"
        echo $(kubectl get secret $passwords_secret -o jsonpath='{.data.ca_password}' | base64 -d) > $ca_password_file
        print_debug "creating $crl_password_file"
        echo $(kubectl get secret $passwords_secret -o jsonpath='{.data.crl_password}' | base64 -d) > $crl_password_file
        print_debug "creating $ocsp_password_file"
        echo $(kubectl get secret $passwords_secret -o jsonpath='{.data.ocsp_password}' | base64 -d) > $ocsp_password_file

    else
        display_header $COLOUR_INFO "Generating random passwords"
        #Create the CA key passwords to be used
        generate_random_password $ca_password_file
        generate_random_password $crl_password_file
        generate_random_password $ocsp_password_file

        #create the Kubernetes Secrets from the generated password files
        save_random_passwords $passwords_path $passwords_secret
    fi

    #Check for existing Certificates (CA, CRL, OSCP) and load them, otherwise create a self signed certificate along with CRL and OSCP. Then save to kubernetes.
    if kubectl get secret $certs_secret >/dev/null 2>&1; then
        display_header $COLOUR_WARN "Using Certificates found in $certs_secret"
        
        #Check that the DB file and the Serial file exist, if not its an invalid state.
        if [ ! -e "$db_path/index" ]; then
            print_warning "Openssl Text database file missing!"
            print_info "Creating new Certificate Authority text database file"
            touch $db_path/index
        fi
        if [ ! -e "$db_path/serial" ]; then
            print_warning "Openssl serial file missing!"
            print_info "Creating new Certificate Authority serial file"
            openssl rand -hex 16  > $db_path/serial
        fi
        #Confirm that the above files were actually created.
        if [ ! -e "$db_path/index" ]; then
            fatal_error "Failed to create text database file!"
        fi
        if [ ! -e "$db_path/serial" ]; then
            fatal_error "Failed to create random database serial!"
        fi

        # Get all keys in the secret. There should be a *.key and *.crt pair for each certificate
        certs=$(kubectl get secret $certs_secret -o jsonpath="{.data}" | yq eval 'keys | .[]' -)

        # Iterate through the private and public certs and create a file for each
        for cert in $certs; do
            #escape the dot in the filename
            key=$(echo "$cert" | sed 's/\./\\./g')

            if echo "$cert" | grep -qE '\.key$'; then
                # Get the value for the private certificate
                value=$(kubectl get secret $certs_secret -o jsonpath="{.data.$key}" | base64 -d)

                # Create a private key for the certificate
                echo "$value" > "$private_path/$cert"
            fi

            if echo "$cert" | grep -qE '\.crt$'; then
                # Get the value for the public certificate
                value=$(kubectl get secret $certs_secret -o jsonpath="{.data.$key}" | base64 -d)

                # Create a private key for the certificate
                echo "$value" > "$public_path/$cert"

                #Copy certs to web distrubution
                print_info "Publishing $cert to web server"
                cp -f "$public_path/$cert" "$web_path/"
            fi
        done

    else
        display_header $COLOUR_INFO "Generating a new self signed certificate for $openssl_name"

        #Create the required files to operate as a CA.
        print_info "Creating Certificate Authority text database file"
        touch $db_path/index

        print_info "Creating Certificate Authority serial file"
        openssl rand -hex 16  > $db_path/serial

        #Confirm that the above files were actually created.
        if [ ! -e "$db_path/index" ]; then
            fatal_error "Failed to create text database file!"
        fi
        if [ ! -e "$db_path/serial" ]; then
            fatal_error "Failed to create random database serial!"
        fi

        #Create the self signed root CA certificate        
        generate_csr "/C=$openssl_country/ST=$openssl_state/L=$openssl_location/O=$openssl_organizationName/OU=$openssl_organizationUnit/CN=$openssl_name" \
            "$private_path/$openssl_certBaseFileName.key" \
            "$csr_path/$openssl_certBaseFileName.csr" \
            $ca_password_file
        
        display_header $COLOUR_INFO "Self Signing CSR"

        openssl ca -selfsign -config $conf_file -in "$csr_path/$openssl_certBaseFileName.csr" \
            -out $public_path/$openssl_certBaseFileName.crt \
            -extensions root_ca_ext \
            -passin file:$ca_password_file \
            -days $openssl_lifeTimeDays -batch

        #check that the signed certificate was created and exists.
        if [ ! -s "$public_path/$openssl_certBaseFileName.crt" ]; then
            fatal_error "Failed to succesfully generate a self signed root certificate"
        else
            #copy the certificate into the shared web folder so it can be served up by the web server
            print_info "Publishing CA Certificate"
            cp -f "$public_path/$openssl_certBaseFileName.crt" "$web_path/"
        fi

        display_header $COLOUR_INFO "Generating OCSP signing certificate for $openssl_name"
        
        generate_csr "/C=$openssl_country/ST=$openssl_state/L=$openssl_location/O=$openssl_organizationName/OU=$openssl_organizationUnit/CN=$openssl_name OCSP Signer" \
            "$private_path/$openssl_certBaseFileName-ocsp.key" \
            "$csr_path/$openssl_certBaseFileName-ocsp.csr" \
            $ocsp_password_file
           
        sign_csr "$csr_path/$openssl_certBaseFileName-ocsp.csr"\
            "$public_path/$openssl_certBaseFileName-ocsp.crt" \
            "ocsp_ext" \
            $openssl_defaultDays \
            true

        display_header $COLOUR_INFO "Generating CRL signing certificate for $openssl_name"

        generate_csr "/C=$openssl_country/ST=$openssl_state/L=$openssl_location/O=$openssl_organizationName/OU=$openssl_organizationUnit/CN=$openssl_name CRL Signer" \
            "$private_path/$openssl_certBaseFileName-crl.key" \
            "$csr_path/$openssl_certBaseFileName-crl.csr" \
            $crl_password_file
           
        sign_csr "$csr_path/$openssl_certBaseFileName-crl.csr"\
            "$public_path/$openssl_certBaseFileName-crl.crt" \
            "crl_ext" \
            $openssl_defaultDays \
            true

        #Save the certificates into Kubernetes
        save_certificates $private_path $public_path $certs_secret
    fi

    #finally allow cleanup to run if its enabled
    cleanup
}

####################################################################
## Begin Script
####################################################################
if [ "$#" -eq 0 ]; then
    display_help
fi

# Set script Default values
set_variables #Function that loads in variables from the yaml

#Check what Command has been requested
case "$1" in
    --help | -h)
        display_help
        ;;
    init)
        COMMAND="init"
        ;;
    gencrl)
        COMMAND="gencrl"
        ;;
    ocsp)
        COMMAND="ocsp"
        ;;
    subordinate)
        COMMAND="subordinate"
        ;;
    *)
        echo "Unknown command: $1"
        echo "Did you forget to include the command that stellar should run?"
        display_help
        ;;
esac
shift #Delete the COMMAND name from the paramaters list


#Run the required command function
if [ "$COMMAND" = 'init' ]; then
    parse_init_params "$@"
    init_container
elif [ "$COMMAND" = 'gencrl' ]; then
    parse_gencrl_params "$@"
    generate_crl
elif [ "$COMMAND" = 'ocsp' ]; then
    parse_ocsp_params "$@"
    start_ocsp_responder
elif [ "$COMMAND" = 'subordinate' ]; then
    parse_subordinate_params "$@"
    config_subordinate
else
    #no command was passed in
    display_help
fi